<?php
/**
 * Git Controller
 */
class Git extends Config
{
	/**
	 * Default comment for git commits.
	 * @var string
	 */
	private $comment_commit = 'clike-auto-commit';

	/**
	 * Parse CLI parameters.
	 * @param array $argv CLIke CLI params array
	 */
	function __construct(array $argv)
	{
		$arg_1 = ltrim(strstr($argv[1], ':'), ':');

		switch ($arg_1) {
			case 'commit':
				$if_comment = array_search('-m', $argv, true);
				$this->comment_commit = ($if_comment) ? $argv[++$if_comment] : $this->comment_commit;
				echo "commiting..\n";

				$this->commitPrepare();
				break;
			case 'config':
				$if_config = array_search('git:config', $argv, true);
				$arg_1 = $argv[++$if_config];
				$arg_2 = $argv[++$if_config] ?? null;
				if ($validated = $this->getValidAppParams($arg_1, $arg_2))
				{
					$this->setAppParam($validated[0], $arg_2);
				}
				break;

			default:
				callHelp::callHelp($argv);
				break;
		}
	}

	private function commitPrepare()
	{
		if ($this->getAppParam('GIT_AUTOPASS') == 'true')
		{
			$cmd = 'git add . &&
				git commit -m "'.$this->comment_commit.'" &&
				git push https://'.$this->getAppParam('GIT_NAME').':'.$this->getAppParam('GIT_PASS').'@'.$this->getAppParam('GIT_HOST').'/'.$this->getAppParam('GIT_NAME').'/'.$this->getAppParam('GIT_REPO').'.git --all'
			;
			$this->execWithDelay($cmd, 5);
		}
		else
		{
			$cmd = 'git add . &&
				git commit -m "'.$this->comment_commit.'" &&
				git push '.$this->getAppParam('GITFILE_FORMAT').' '.$this->getAppParam('GIT_MAIN_BRANCH')
			;
			$this->execWithDelay($cmd, 20);
		}
	}

	/**
	 * Execute CLI commands in background.
	 * @param  string $cmd   	Commands chain
	 * @param  int    $delay 	Delay after executino (in seconds)
	 * @return null        		[description]
	 */
	private function execWithDelay(string $cmd, int $delay)
	{
			$this->execInBackground($cmd);
			sleep($delay);
			return;
	}

	/**
	 * !!! Not used yet.
	 */
	private function execWithDelayAsync(array $cmd, int $count_cmd, array $delay)
	{
		$i = 1;
		foreach ($cmd as $value) {
			$this->execInBackground($value);
			$i++;
			if ($i < $count_cmd) {
				sleep($delay[0]);
			} else {
				sleep($delay[1]);
			}
		}
		return;
	}
}
